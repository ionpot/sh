# print text in color
# $1 int color
# $2 string text
incolor () {
	local esc=$(printf "\e")
	printf "$esc[3%sm%s$esc[0m" $1 "$2"
}

# ls given file types
lsf() {
    ls *.$1
}

# grep js files
# excluding node_modules and hidden dirs
grjs() {
    find . -not \( -path "*/\.*" -prune \) -not \( -path "*/node_modules/*" -prune \) -type f -name \*.js -exec grep -n "$1" {} \+
}

# grep ml and mli files
# excluding _build and hidden dirs
grml() {
    find . -not \( -path "*/\.*" -prune \) -not \( -path "*/_build/*" -prune \) -type f \( -name '*.ml' -or -name '*.mli' \) -exec grep -n "$1" {} \+
}

# $1 = binary string
# $2 = output base
function fromb {
    node -p "parseInt('$1', 2).toString($2)"
}

# create .h and .c files from name
# $1 = name
cfiles () {
	local token=${1^^}_H
	cat >$1.h <<CODE
#ifndef $token
#define $token

#endif
CODE
	cat >$1.c <<CODE
#include "$1.h"

#include <assert.h>
CODE
}

# create .hpp and .cpp files
# $1 = namespace
# $2 = file name
cppf () {
	if [ -z "$2" ]; then
		echo need file name
		return
	fi
	cat >$2.hpp <<CODE
#pragma once

namespace $1 {
}
CODE
	cat >$2.cpp <<CODE
#include "$2.hpp"

namespace $1 {
}
CODE
}

# http status code
hsc () {
	if [ -n "$1" ]; then
	node -p "http.STATUS_CODES[$1]"
	else
	node -p "s=http.STATUS_CODES;a=[];for(const c in s)a.push(c+' '+s[c]);a.join(', ')"
	fi
}

# pretty print json from stdin
json () {
	node $HOME/sh/json.js $@
}

# create js files
jsf () {
	for x in "$@"
	do
		cat >$x.js <<CODE
var x = require("./,.js");

module.exports = function () {
};
CODE
	done
}

# create ts files
tsf () {
	for x in "$@"
	do
		cat >$x.ts <<CODE
import {} from ""
export default () => {}
CODE
	done
}

# ocamlbuild $1.cma
ocba () {
	local x=${1%.*}
	ocamlbuild "$x.cma"
}

# ocamlbuild $1.byte
ocbb () {
	local x=${1%.*}
	ocamlbuild "$x.byte"
}

# ocamlbuild $1.native
ocbn () {
	local x=${1%.*}
	ocamlbuild "$x.native"
}

# compile and run c source(s)
crun () {
	local t=`mktemp`
	local flags="-std=c99 -Wall -Wextra -Werror -pedantic -o $t"
	if [ -n "$1" ]; then
		gcc $flags $@ && $t
	else
		gcc $flags -x c - && $t
	fi
	rm $t
}
